#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    Jul 07, 2022 02:38:01 PM CEST  platform: Linux
#####  SF method T(E) function is still not included or T(E) is wrong, one need to consider their own sensitivity factors
import sys
import os  
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
#import tkinter.messagebox
from numpy import loadtxt, interp, exp
from PIL import ImageTk, Image


import xpsquanti_support

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40' # X11 color: #666666
        _ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
        _ana2color = 'beige' # X11 color: #f5f5dc
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("735x513+594+153")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1,  1)
        top.title("XPS quantification")
        top.configure(background="#bcbcbc")
        top.configure(highlightcolor="black")

        self.top = top
        self.combobox = tk.StringVar()

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.033, rely=0.078, height=35, width=103)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#262626")
        self.Label1.configure(compound='left')
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(text='''1. Ephoton''')

        self.Label1_1 = tk.Label(self.top)
        self.Label1_1.place(relx=0.014, rely=0.252, height=35, width=152)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(anchor='w')
        self.Label1_1.configure(background="#262626")
        self.Label1_1.configure(compound='left')
        self.Label1_1.configure(foreground="#ffffff")
        self.Label1_1.configure(text='''2. angle(beam-spec)''')

        self.Label1_1_1 = tk.Label(self.top)
        self.Label1_1_1.place(relx=0.314, rely=0.078, height=35, width=189)
        self.Label1_1_1.configure(activebackground="#f9f9f9")
        self.Label1_1_1.configure(anchor='w')
        self.Label1_1_1.configure(background="#262626")
        self.Label1_1_1.configure(compound='center')
        self.Label1_1_1.configure(foreground="#ffffff")
        self.Label1_1_1.configure(text='''        3.       element    &    area''')

        self.Labelele1 = tk.Label(self.top)
        self.Labelele1.place(relx=0.283, rely=0.177, height=36, width=54)
        self.Labelele1.configure(activebackground="#f9f9f9")
        self.Labelele1.configure(anchor='w')
        self.Labelele1.configure(background="#262626")
        self.Labelele1.configure(compound='left')
        self.Labelele1.configure(foreground="#ffffff")
        self.Labelele1.configure(text='''ele1''')

        self.Labelele2 = tk.Label(self.top)
        self.Labelele2.place(relx=0.283, rely=0.267, height=35, width=54)
        self.Labelele2.configure(activebackground="#f9f9f9")
        self.Labelele2.configure(anchor='w')
        self.Labelele2.configure(background="#262626")
        self.Labelele2.configure(compound='left')
        self.Labelele2.configure(foreground="#ffffff")
        self.Labelele2.configure(text='''ele2''')

        self.Entryphoton = tk.Entry(self.top)
        self.Entryphoton.place(relx=0.041, rely=0.165, height=23, relwidth=0.103)

        self.Entryphoton.configure(background="#f2f2f2")
        self.Entryphoton.configure(font="TkFixedFont")
        self.Entryphoton.configure(foreground="#aa80bf")
        self.Entryphoton.configure(selectbackground="#c4c4c4")
        self.Entryphoton.insert(-1, 1486.6)

        self.Button1 = tk.Button(self.top)
        self.Button1.place(relx=0.622, rely=0.078, height=33, width=71)
        self.Button1.configure(activebackground="beige")
        self.Button1.configure(background="#3498DB")
        self.Button1.configure(borderwidth="2")
        self.Button1.configure(command=self.clicked)
        self.Button1.configure(compound='left')
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(text='''calculate''')

        self.Button3 = tk.Button(self.top)
        self.Button3.place(relx=0.622, rely=0.55, height=33, width=135)
        self.Button3.configure(activebackground="beige")
        self.Button3.configure(background="#3498DB")
        self.Button3.configure(borderwidth="2")
        self.Button3.configure(command=self.sfclicked)
        self.Button3.configure(compound='left')
        self.Button3.configure(foreground="#ffffff")
        self.Button3.configure(text='''calculate (SF method)''')

        self.Button2 = tk.Button(self.top)
        self.Button2.place(relx=0.732, rely=0.078, height=33, width=71)
        self.Button2.configure(activebackground="beige")
        self.Button2.configure(background="#641E16")
        self.Button2.configure(borderwidth="2")
        self.Button2.configure(command=self.quit)
        self.Button2.configure(compound='left')
        self.Button2.configure(foreground="#ffffff")
        self.Button2.configure(text='''quit''')

        self.Labelresu2 = tk.Label(self.top)
        self.Labelresu2.place(relx=0.603, rely=0.64)
        #self.Labelresu.configure(activebackground="#f9f9f9")
        self.Labelresu2.configure(anchor='w')
        self.Labelresu2.configure(justify=LEFT)
        #self.Labelresu.configure(background="#ffffff")
        self.Labelresu2.configure(compound='left')
        self.Labelresu2.configure(foreground="#000000")

        #self.Labelele3 = tk.Label(self.top)
        #self.Labelele3.place(relx=0.623, rely=0.167, height=30, width=84)
        #self.Labelele3.configure(activebackground="#f9f9f9")
        #self.Labelele3.configure(anchor='w')
        #self.Labelele3.configure(background="#262626")
        ##self.Labelele3.configure(compound='left')
        #self.Labelele3.configure(foreground="#ffffff")
        #self.Labelele3.configure(text='''the result is:''')

        self.Labelresu = tk.Label(self.top)
        self.Labelresu.place(relx=0.603, rely=0.167)
        #self.Labelresu.configure(activebackground="#f9f9f9")
        self.Labelresu.configure(anchor='w')
        self.Labelresu.configure(justify=LEFT)
        #self.Labelresu.configure(background="#ffffff")
        self.Labelresu.configure(compound='left')
        self.Labelresu.configure(foreground="#000000")

        self.Labelele4 = tk.Label(self.top)
        self.Labelele4.place(relx=0.014, rely=0.432, height=35, width=159)
        self.Labelele4.configure(activebackground="#f9f9f9")
        self.Labelele4.configure(anchor='w')
        self.Labelele4.configure(background="#262626")
        self.Labelele4.configure(compound='left')
        self.Labelele4.configure(foreground="#ffffff")
        self.Labelele4.configure(text='''IMFP calculation (TPP-2M)''')

        self.Labelele5 = tk.Label(self.top)
        self.Labelele5.place(relx=0.025, rely=0.522, height=25, width=40)
        self.Labelele5.configure(activebackground="#f9f9f9")
        self.Labelele5.configure(anchor='w')
        self.Labelele5.configure(background="#262626")
        self.Labelele5.configure(compound='left')
        self.Labelele5.configure(foreground="#ffffff")
        self.Labelele5.configure(text='''Zavg''')

        self.Labelele6 = tk.Label(self.top)
        self.Labelele6.place(relx=0.025, rely=0.582, height=25, width=40)
        self.Labelele6.configure(activebackground="#f9f9f9")
        self.Labelele6.configure(anchor='w')
        self.Labelele6.configure(background="#262626")
        self.Labelele6.configure(compound='left')
        self.Labelele6.configure(foreground="#ffffff")
        self.Labelele6.configure(text='''egap''')

        self.Labelele7 = tk.Label(self.top)
        self.Labelele7.place(relx=0.025, rely=0.642, height=25, width=40)
        self.Labelele7.configure(activebackground="#f9f9f9")
        self.Labelele7.configure(anchor='w')
        self.Labelele7.configure(background="#262626")
        self.Labelele7.configure(compound='left')
        self.Labelele7.configure(foreground="#ffffff")
        self.Labelele7.configure(text='''a(nm)''')

        self.Labelele8 = tk.Label(self.top)
        self.Labelele8.place(relx=0.025, rely=0.702, height=25, width=40)
        self.Labelele8.configure(activebackground="#f9f9f9")
        self.Labelele8.configure(anchor='w')
        self.Labelele8.configure(background="#262626")
        self.Labelele8.configure(compound='left')
        self.Labelele8.configure(foreground="#ffffff")
        self.Labelele8.configure(text='''BE1''')

        self.Labelele9 = tk.Label(self.top)
        self.Labelele9.place(relx=0.025, rely=0.762, height=25, width=40)
        self.Labelele9.configure(activebackground="#f9f9f9")
        self.Labelele9.configure(anchor='w')
        self.Labelele9.configure(background="#262626")
        self.Labelele9.configure(compound='left')
        self.Labelele9.configure(foreground="#ffffff")
        self.Labelele9.configure(text='''BE2''')

        self.Labelele10 = tk.Label(self.top)
        self.Labelele10.place(relx=0.025, rely=0.822, height=25, width=120)
        self.Labelele10.configure(activebackground="#f9f9f9")
        self.Labelele10.configure(anchor='w')
        self.Labelele10.configure(background="#262626")
        self.Labelele10.configure(compound='left')
        self.Labelele10.configure(foreground="#ffffff")
        self.Labelele10.configure(text='''film thickness(nm)''')

        self.zavg = tk.Entry(self.top)
        self.zavg.place(relx=0.091, rely=0.522, height=23, relwidth=0.1)
        self.zavg.configure(background="#f2f2f2")
        self.zavg.configure(font="TkFixedFont")
        self.zavg.configure(foreground="#aa80bf")
        self.zavg.configure(selectbackground="#c4c4c4")
        self.zavg.insert(-1, 4)

        self.egap = tk.Entry(self.top)
        self.egap.place(relx=0.091, rely=0.582, height=23, relwidth=0.1)
        self.egap.configure(background="#f2f2f2")
        self.egap.configure(font="TkFixedFont")
        self.egap.configure(foreground="#aa80bf")
        self.egap.configure(selectbackground="#c4c4c4")
        self.egap.insert(-1, 3)

        self.anm = tk.Entry(self.top)
        self.anm.place(relx=0.091, rely=0.642, height=23, relwidth=0.1)
        self.anm.configure(background="#f2f2f2")
        self.anm.configure(font="TkFixedFont")
        self.anm.configure(foreground="#aa80bf")
        self.anm.configure(selectbackground="#c4c4c4")
        self.anm.insert(-1, 0.25)

        self.be1 = tk.Entry(self.top)
        self.be1.place(relx=0.091, rely=0.702, height=23, relwidth=0.1)
        self.be1.configure(background="#f2f2f2")
        self.be1.configure(font="TkFixedFont")
        self.be1.configure(foreground="#aa80bf")
        self.be1.configure(selectbackground="#c4c4c4")
        self.be1.insert(-1, 285)

        self.be2 = tk.Entry(self.top)
        self.be2.place(relx=0.091, rely=0.762, height=23, relwidth=0.1)
        self.be2.configure(background="#f2f2f2")
        self.be2.configure(font="TkFixedFont")
        self.be2.configure(foreground="#aa80bf")
        self.be2.configure(selectbackground="#c4c4c4")
        self.be2.insert(-1, 395)

        self.fthick = tk.Entry(self.top)
        self.fthick.place(relx=0.201, rely=0.822, height=23, relwidth=0.09)
        self.fthick.configure(background="#f2f2f2")
        self.fthick.configure(font="TkFixedFont")
        self.fthick.configure(foreground="#aa80bf")
        self.fthick.configure(selectbackground="#c4c4c4")
        self.fthick.insert(-1, 10)


        self.Entryangle = tk.Entry(self.top)
        self.Entryangle.place(relx=0.041, rely=0.34, height=23, relwidth=0.103)
        self.Entryangle.configure(background="#f2f2f2")
        self.Entryangle.configure(font="TkFixedFont")
        self.Entryangle.configure(foreground="#aa80bf")
        self.Entryangle.configure(selectbackground="#c4c4c4")
        self.Entryangle.insert(-1, 54.7)

        self.Entryele1 = tk.Entry(self.top)
        self.Entryele1.place(relx=0.367, rely=0.195, height=23, relwidth=0.103)
        self.Entryele1.configure(background="#f2f2f2")
        self.Entryele1.configure(font="TkFixedFont")
        self.Entryele1.configure(foreground="#aa80bf")
        self.Entryele1.configure(selectbackground="#c4c4c4")
        self.Entryele1.insert(-1, "c1s")

        self.TCombobox1 = ttk.Combobox(self.top)
        self.TCombobox1.place(relx=0.299, rely=0.487, relheight=0.047
                , relwidth=0.263)
        self.TCombobox1.configure(textvariable=self.combobox)
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1['values']=("bulk","layer1","layer2","layer3")
        #self.TCombobox1.current(0)
        self.TCombobox1.bind("<<ComboboxSelected>>",self.getim)

        self.Entryele2 = tk.Entry(self.top)
        self.Entryele2.place(relx=0.366, rely=0.273, height=23, relwidth=0.103)
        self.Entryele2.configure(background="#f2f2f2")
        self.Entryele2.configure(font="TkFixedFont")
        self.Entryele2.configure(foreground="#aa80bf")
        self.Entryele2.configure(selectbackground="#c4c4c4")
        self.Entryele2.insert(-1, "c1s")

        self.Entryarea1 = tk.Entry(self.top)
        self.Entryarea1.place(relx=0.478, rely=0.193, height=23, relwidth=0.103)
        self.Entryarea1.configure(background="#f2f2f2")
        self.Entryarea1.configure(font="TkFixedFont")
        self.Entryarea1.configure(foreground="#aa80bf")
        self.Entryarea1.configure(selectbackground="#c4c4c4")

        self.Entryarea2 = tk.Entry(self.top)
        self.Entryarea2.place(relx=0.476, rely=0.273, height=23, relwidth=0.103)
        self.Entryarea2.configure(background="#f2f2f2")
        self.Entryarea2.configure(font="TkFixedFont")
        self.Entryarea2.configure(foreground="#aa80bf")
        self.Entryarea2.configure(selectbackground="#c4c4c4")

        self.Label1_1_1_2 = tk.Label(self.top)
        self.Label1_1_1_2.place(relx=0.299, rely=0.39, height=35, width=189)
        self.Label1_1_1_2.configure(activebackground="#f9f9f9")
        self.Label1_1_1_2.configure(anchor='w')
        self.Label1_1_1_2.configure(background="#262626")
        self.Label1_1_1_2.configure(compound='center')
        self.Label1_1_1_2.configure(foreground="#ffffff")
        self.Label1_1_1_2.configure(text='''4. XPS model''')


    # here start the defining the functions, define a simplified IMFP equation
    def tpp(self, KE,z,eg,a):
        return (a**1.7)*(4 + 0.44 *z**0.5 + 0.104 *KE**0.872)/((z**0.38)*(1 - 0.02 *eg))
    #this is the get crosssection function
    def getcs(self,penergy):
        #path="/home/qiankun/python/xpsquanti/tkmethod/cs"
        #os.chdir(path)
        global dir_path
        dir_path = os.path.dirname(os.path.realpath(__file__))
        path1 = dir_path+'/cs'
        try:
            os.chdir(path1)
        except FileNotFoundError:
            pass
        except NotADirectoryError:
            pass
        except PermissionError:
            pass
        ele1cs = loadtxt(self.Entryele1.get())
        ele2cs = loadtxt(self.Entryele2.get())
        ele1csx = ele1cs[:,0]
        ele1csy = ele1cs[:,1]
        ele1csv = interp(penergy,ele1csx,ele1csy)  #linear interpolation
        ele2csx = ele2cs[:,0]
        ele2csy = ele2cs[:,1]
        ele2csv = interp(penergy,ele2csx,ele2csy)  #linear interpolation
        ele12csv = [ele1csv,ele2csv]
        return ele12csv
    ### here get image
    def getim(self,model):
        global dir_path
        dir_path = os.path.dirname(os.path.realpath(__file__))
        path2 = dir_path +'/images'
        try:
            os.chdir(path2)
        except FileNotFoundError:
            pass
        except NotADirectoryError:
            pass
        except PermissionError:
            pass
        self.modelfig1=ImageTk.PhotoImage(Image.open("bulk").resize((150, 150), Image.ANTIALIAS))
        self.modelfig2=ImageTk.PhotoImage(Image.open("layer1").resize((150, 150), Image.ANTIALIAS))
        self.modelfig3=ImageTk.PhotoImage(Image.open("layer2").resize((150, 150), Image.ANTIALIAS))
        self.modelfig4=ImageTk.PhotoImage(Image.open("layer3").resize((150, 150), Image.ANTIALIAS))
        if self.TCombobox1.get()== "bulk":
            self.model1=tk.Label(self.top, image=self.modelfig1).place(relx=0.299, rely=0.546, height=150, relwidth=0.25)
        elif self.TCombobox1.get()== "layer1":
            self.model1=tk.Label(self.top, image=self.modelfig2).place(relx=0.299, rely=0.546, height=150, relwidth=0.25)
        elif self.TCombobox1.get()== "layer2":
            self.model1=tk.Label(self.top, image=self.modelfig3).place(relx=0.299, rely=0.546, height=150, relwidth=0.25)
        elif self.TCombobox1.get()== "layer3":
            self.model1=tk.Label(self.top, image=self.modelfig4).place(relx=0.299, rely=0.546, height=150, relwidth=0.25)
    # get snsitivity factors
    def getsf(self,element):
        global dir_path
        dir_path = os.path.dirname(os.path.realpath(__file__))
        path3 = dir_path +'/sf'
        try:
            os.chdir(path3)
        except FileNotFoundError:
            pass
        except NotADirectoryError:
            pass
        except PermissionError:
            pass
        sfx, sfy = [], []
        if float(self.Entryangle.get())==54.7:
            for line in open('sf54_7', 'r'):
                values = [s for s in line.split()]
                sfx.append(values[0])
                sfy.append(float(values[1]))
             #determine lenghth of the list
            elep=sfx.index(element)
            valp=sfy[elep]
        else:
            for line in open('sf90', 'r'):
                values = [s for s in line.split()]
                sfx.append(values[0])
                sfy.append(float(values[1]))
             #determine lenghth of the list
            elep=sfx.index(element)
            valp=sfy[elep]
        return valp

     #### here define calculate   
    def clicked(self):
        ratiobulk1=float(self.Entryarea1.get())/float(self.Entryarea2.get()) #ratiolayer1 is the same as this
        ccs = self.getcs(self.Entryphoton.get())
        ccsele1=ccs[0]
        ccsele2=ccs[1]
        ke1=float(self.Entryphoton.get())-float(self.be1.get())
        ke2=float(self.Entryphoton.get())-float(self.be2.get())
        imfp1=self.tpp(ke1,float(self.zavg.get()),float(self.egap.get()),float(self.anm.get()))
        imfp2=self.tpp(ke2,float(self.zavg.get()),float(self.egap.get()),float(self.anm.get()))
        ratiobulk2=(ratiobulk1*float(ccsele2)*imfp2)/(float(ccsele1)*imfp1)
        tfilm=float(self.fthick.get())
        ratiolayer12=ratiobulk2*(1-exp(-tfilm/imfp2))/(1-exp(-tfilm/imfp1))
        ratiolayer21=ratiobulk1*exp(-tfilm/imfp2)/(1-exp(-tfilm/imfp1))
        ratiolayer22=ratiobulk2*exp(-tfilm/imfp2)/(1-exp(-tfilm/imfp1))
        ratiolayer32=ratiobulk2*exp(-tfilm/imfp2)/exp(-tfilm/imfp1)
        if self.TCombobox1.get()== "bulk":
            if self.Entryele1.get()==self.Entryele2.get():
                #tkinter.messagebox.showinfo('the answer is: ', 'CS and IMFP ignored\n' ,ccs)
                self.Labelresu.configure(text="Area=N*fph*cs*IMFP*\nTransmission(E)*Cos(thetA)*A\n"+"CS,IMFP,T(E) ignored, only area considered\n"+ "\n"+"element density ratio is:\n" +"N1/N2=Area1/Area2= "+str(ratiobulk1))
            else:
                self.Labelresu.configure(text="Area=N*fph*cs*IMFP*\nTransmission(E)*Cos(thetA)*A\n"+"CS,IMFP considered\n"+ "cs1= "+str(ccsele1)  +" "+ "IMFP1= " + str(imfp1) +"\n"+"cs2= "+str(ccsele2)  +" "+ "IMFP2= " + str(imfp2)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1*cs2*imfp2/(Area2*cs1*imfp1)= "+str(ratiobulk2))
        elif self.TCombobox1.get()== "layer1":
            if self.Entryele1.get()==self.Entryele2.get():
                self.Labelresu.configure(text="Area=N*cs*IMFP*(1-exp(-t/IMFP))\n"+"CS,IMFP,T(E) ignored, only area considered\n"+ "\n"+"element density ratio is:\n" +"N1/N2=Area1/Area2= "+str(ratiobulk1))
            else:
                self.Labelresu.configure(text="Area=N*cs*IMFP*(1-exp(-t/IMFP))\n"+"CS,IMFP considered\n"+ "cs1= "+str(ccsele1)  +" "+ "IMFP1= " + str(imfp1) +"\n"+"cs2= "+str(ccsele2)  +" "+ "IMFP2= " + str(imfp2)+"\n"+"film thickness= "+str(tfilm)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1*cs2*imfp2*(1-exp(-t/imf2))/(Area2*cs1*imfp1*(1-exp(-t/imfp1)))= \n"+str(ratiolayer12))
        elif self.TCombobox1.get()== "layer2":
            if self.Entryele1.get()==self.Entryele2.get():
                self.Labelresu.configure(text="Area1(toplayer)=N1*cs*IMFP*(1-exp(-t/IMFP1))\n"+"Area2(substrate)=N2*cs*IMFP*exp(-t/IMFP2)\n"+"CS ignored, IMFP1=IMFP2\n"+ "cs1= "+str(ccsele1)  +" "+ "IMFP1= " + str(imfp1) +"\n"+"cs2= "+str(ccsele2)  +" "+ "IMFP2= " + str(imfp2)+"\n"+"film thickness= "+str(tfilm)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1*exp(-t/imfp2)/(Area2*(1-exp(-t/imfp1)))= \n"+str(ratiolayer21))
            else:
                self.Labelresu.configure(text="Area1(toplayer)=N1*cs*IMFP*(1-exp(-t/IMFP1))\n"+"Area2(substrate)=N2*cs*IMFP*exp(-t/IMFP2)\n"+"CS,IMFP considered\n"+ "cs1= "+str(ccsele1)  +" "+ "IMFP1= " + str(imfp1) +"\n"+"cs2= "+str(ccsele2)  +" "+ "IMFP2= " + str(imfp2)+"\n"+"film thickness= "+str(tfilm)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1*cs2*imfp2*exp(-t/imfp2)/(Area2*cs1*imfp1*(1-exp(-t/imfp1)))= \n"+str(ratiolayer22))
        elif self.TCombobox1.get()== "layer3":
            if self.Entryele1.get()==self.Entryele2.get():
                self.Labelresu.configure(text="Area=N*cs*IMFP*exp(-t/IMFP)\n"+"CS, IMFP ignored\n"+ "cs1= "+str(ccsele1)  +" "+ "IMFP1= " + str(imfp1) +"\n"+"cs2= "+str(ccsele2)  +" "+ "IMFP2= " + str(imfp2)+"\n"+"film thickness= "+str(tfilm)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1/Area2="+str(ratiobulk1))
            else:
                self.Labelresu.configure(text="Area1(toplayer)=N1*cs1*IMFP1*exp(-t/IMFP1)\n"+"Area2(substrate)=N2*cs2*IMFP2*exp(-t/IMFP2)\n"+"CS, IMFP considered\n"+ "cs1= "+str(ccsele1)  +" "+ "IMFP1= " + str(imfp1) +"\n"+"cs2= "+str(ccsele2)  +" "+ "IMFP2= " + str(imfp2)+"\n"+"film thickness= "+str(tfilm)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1*cs2*imfp2*exp(-t/imfp2)/(Area2*cs1*imfp1*exp(-t/imfp1))= \n"+str(ratiolayer32))
        else:
            pass

    ### sensitiity factor calculate
    def sfclicked(self):
        sfratiobulk1=float(self.Entryarea1.get())/float(self.Entryarea2.get()) #ratiolayer1 is the same as this
        #ccs = self.getcs(self.Entryphoton.get())
        #ccsele1=ccs[0]
        #ccsele2=ccs[1]
        sfele1 = self.getsf(self.Entryele1.get())
        sfele2 = self.getsf(self.Entryele2.get())
        ke1=float(self.Entryphoton.get())-float(self.be1.get())
        ke2=float(self.Entryphoton.get())-float(self.be2.get())
        imfp1=self.tpp(ke1,float(self.zavg.get()),float(self.egap.get()),float(self.anm.get()))
        imfp2=self.tpp(ke2,float(self.zavg.get()),float(self.egap.get()),float(self.anm.get()))
        sfratiobulk2=sfratiobulk1*float(sfele2)/float(sfele1)
        tfilm=float(self.fthick.get())
        sfratiolayer12=sfratiobulk2*(1-exp(-tfilm/imfp2))/(1-exp(-tfilm/imfp1))
        sfratiolayer21=sfratiobulk1*exp(-tfilm/imfp2)/(1-exp(-tfilm/imfp1))
        sfratiolayer22=sfratiobulk2*exp(-tfilm/imfp2)/(1-exp(-tfilm/imfp1))
        sfratiolayer32=sfratiobulk2*exp(-tfilm/imfp2)/exp(-tfilm/imfp1)
        if self.TCombobox1.get()== "bulk":
            if self.Entryele1.get()==self.Entryele2.get():
                self.Labelresu2.configure(text="Area=N*sf\n"+ "the same element, sf ignored\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1/Area2= "+str(sfratiobulk1))
            else:
                self.Labelresu2.configure(text="Area=N*sf\n"+"sf considered\n"+ "sfele1= "+str(sfele1)  +"\n"+"sfele2= "+str(sfele2)  +"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1*sfele2/(Area2*sfele1)= "+str(sfratiobulk2))
        elif self.TCombobox1.get()== "layer1":
            if self.Entryele1.get()==self.Entryele2.get():
                self.Labelresu2.configure(text="Area=N*sf*(1-exp(-t/IMFP))\n"+"sf,IMFP, ignored, only area considered\n"+ "\n"+"element density ratio is:\n" +"N1/N2=Area1/Area2= "+str(sfratiobulk1))
            else:
                self.Labelresu2.configure(text="Area=N*sf*(1-exp(-t/IMFP))\n"+"sf,IMFP considered\n"+ "sfele1= "+str(sfele1)  +"\n"+"sfele2= "+str(sfele2) +"\n"+"film thickness= "+str(tfilm)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1*sf2*(1-exp(-t/imf2))/(Area2*sf1*(1-exp(-t/imfp1)))= \n"+str(sfratiolayer12))
        elif self.TCombobox1.get()== "layer2":
            if self.Entryele1.get()==self.Entryele2.get():
                self.Labelresu2.configure(text="Area1(toplayer)=N1*sf1*(1-exp(-t/IMFP1))\n"+"Area2(substrate)=N2*sf2*exp(-t/IMFP2)\n"+"sf,IMFP1=IMFP2\n"+ "sfele1= "+str(sfele1)  +"\n"+"sfele2= "+str(sfele2) +"\n"+"film thickness= "+str(tfilm)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1*exp(-t/imfp2)/(Area2*(1-exp(-t/imfp1)))= \n"+str(sfratiolayer21))
            else:
                self.Labelresu2.configure(text="Area1(toplayer)=N1*sf1*(1-exp(-t/IMFP1))\n"+"Area2(substrate)=N2*sf2*exp(-t/IMFP2)\n"+"sf,IMFP considered\n"+ "sfele1= "+str(sfele1)  +"\n"+"sfele2= "+str(sfele2)+"\n"+"film thickness= "+str(tfilm)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1*sf2*exp(-t/imfp2)/(Area2*sf1*(1-exp(-t/imfp1)))= \n"+str(sfratiolayer22))
        elif self.TCombobox1.get()== "layer3":
            if self.Entryele1.get()==self.Entryele2.get():
                self.Labelresu2.configure(text="Area=N*sf*exp(-t/IMFP)\n"+"sf ignored\n"+ "sfele1= "+str(sfele1)  +"\n"+"sfele2= "+str(sfele2)+"\n"+"film thickness= "+str(tfilm)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1/Area2="+str(sfratiobulk1))
            else:
                self.Labelresu2.configure(text="Area1(toplayer)=N1*sf1*exp(-t/IMFP1)\n"+"Area2(substrate)=N2*sf2*exp(-t/IMFP2)\n"+"sf, IMFP considered\n"+ "sfele1= "+str(sfele1)  +"\n"+"sfele2= "+str(sfele2)+"\n"+"film thickness= "+str(tfilm)+"\n"+"\n"+"element density ratio is:\n" +"N1/N2=Area1*sf2*exp(-t/imfp2)/(Area2*sf1*exp(-t/imfp1))= \n"+str(sfratiolayer32))
        else:
            pass

        #self.Labelresu.configure(text="the result is: "+str(ccs))
    ###quit function
    def quit(self):
       self.top.destroy()

def start_up():
    xpsquanti_support.main()

if __name__ == '__main__':
    xpsquanti_support.main()
